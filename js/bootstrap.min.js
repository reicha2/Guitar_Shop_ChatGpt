/*!
  * Bootstrap v4.5.2 (https://getbootstrap.com/)
  * Copyright 2020 The Bootstrap Authors
  * Copyright 2011-2020 Twitter, Inc.
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!(function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? (module.exports = e(require("jquery")))
      : "function" == typeof define && define.amd
      ? define(["jquery"], function (i) {
          return e(i);
        })
      : ((t = "undefined" != typeof globalThis ? globalThis : t || self).bootstrap =
          e(t.jQuery));
  })(this, function (t) {
    "use strict";
  
    function e(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        (n.enumerable = n.enumerable || !1),
          (n.configurable = !0),
          "value" in n && (n.writable = !0),
          Object.defineProperty(t, n.key, n);
      }
    }
  
    function i(t, i, n) {
      return i && e(t.prototype, i), n && e(t, n), t;
    }
  
    (t = t && t.hasOwnProperty("default") ? t.default : t),
      (function (t) {
        var e = "transitionend";
  
        function i(e) {
          var i = this,
            n = !1;
          return (
            t(this).one(l.TRANSITION_END, function () {
              n = !0;
            }),
            setTimeout(function () {
              n || l.triggerTransitionEnd(i);
            }, e),
            this
          );
        }
        var l = {
          TRANSITION_END: "bsTransitionEnd",
          getUID: function (t) {
            do {
              t += ~~(1e6 * Math.random());
            } while (document.getElementById(t));
            return t;
          },
          getSelectorFromElement: function (e) {
            var i = e.getAttribute("data-target");
            if (!i || "#" === i) {
              var n = e.getAttribute("href");
              i = n && "#" !== n ? n.trim() : "";
            }
            try {
              return document.querySelector(i) ? i : null;
            } catch (t) {
              return null;
            }
          },
          getTransitionDurationFromElement: function (e) {
            if (!e) return 0;
            var i = t(e).css("transition-duration"),
              n = t(e).css("transition-delay"),
              l = parseFloat(i),
              o = parseFloat(n);
            return l || o
              ? ((i = i.split(",")[0]),
                (n = n.split(",")[0]),
                1e3 * (parseFloat(i) + parseFloat(n)))
              : 0;
          },
          reflow: function (t) {
            return t.offsetHeight;
          },
          triggerTransitionEnd: function (e) {
            t(e).trigger(e);
          },
          supportsTransitionEnd: function () {
            return Boolean(e);
          },
          isElement: function (t) {
            return (t[0] || t).nodeType;
          },
          typeCheckConfig: function (t, e, i) {
            for (var n in i)
              if (Object.prototype.hasOwnProperty.call(i, n)) {
                var l = i[n],
                  o = e[n],
                  r =
                    o && l && "object" == typeof o && "object" == typeof l
                      ? typeCheckConfig(o, l)
                      : o !== l,
                  s = Object.prototype.hasOwnProperty.call(e, n);
                if (r && s) throw new Error("Bootstrap's JavaScript requires jQuery " + l + " (window.jQuery is " + o + ")");
              }
          },
        };
        (t.fn.emulateTransitionEnd = i),
          (t.event.special[l.TRANSITION_END] = {
            bindType: e,
            delegateType: e,
            handle: function (e) {
              if (t(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
            },
          });
      })(t),
      (function (t) {
        var e = "alert",
          i = t.fn[e],
          l = { CLOSE: "close.bs.alert", CLOSED: "closed.bs.alert", CLICK_DATA_API: "click.bs.alert.data-api" },
          o = { ALERT: "alert", FADE: "fade", SHOW: "show" },
          r = (function () {
            function e(e) {
              this._element = e;
            }
            var i = e.prototype;
            return (
              (i.close = function (e) {
                var i = this._element;
                e && (i = this._getRootElement(e)),
                  this._triggerCloseEvent(i).isDefaultPrevented() ||
                    this._removeElement(i);
              }),
              (i.dispose = function () {
                t.removeData(this._element, "bs.alert"), (this._element = null);
              }),
              (i._getRootElement = function (e) {
                var i = l.getSelectorFromElement(e),
                  n = !1;
                return i && (n = document.querySelector(i)), n || (n = t(e).closest("." + o.ALERT)[0]), n;
              }),
              (i._triggerCloseEvent = function (e) {
                var i = t.Event(l.CLOSE);
                return t(e).trigger(i), i;
              }),
              (i._removeElement = function (e) {
                var i = this;
                if ((t(e).removeClass(o.SHOW), t(e).hasClass(o.FADE))) {
                  var n = l.getTransitionDurationFromElement(e);
                  t(e)
                    .one(l.TRANSITION_END, function (t) {
                      return i._destroyElement(e, t);
                    })
                    .emulateTransitionEnd(n);
                } else this._destroyElement(e);
              }),
              (i._destroyElement = function (e) {
                t(e).detach().trigger(l.CLOSED).remove();
              }),
              (e._jQueryInterface = function (i) {
                return this.each(function () {
                  var n = t(this),
                    o = n.data("bs.alert");
                  o || ((o = new e(this)), n.data("bs.alert", o)), "close" === i && o[i](this);
                });
              }),
              (e._handleDismiss = function (e) {
                return function (i) {
                  i && i.preventDefault(), e.close(this);
                };
              }),
              i(e, null, [
                {
                  key: "VERSION",
                  get: function () {
                    return "4.5.2";
                  },
                },
              ]),
              e
            );
          })();
        t(document).on(l.CLICK_DATA_API, '[data-dismiss="alert"]', r._handleDismiss(new r())),
          (t.fn[e] = r._jQueryInterface),
          (t.fn[e].Constructor = r),
          (t.fn[e].noConflict = function () {
            return (t.fn[e] = i), r._jQueryInterface;
          });
      })(t),
      (function (t) {
        var e = "button",
          i = t.fn[e],
          o = { ACTIVE: "active", BUTTON: "btn", FOCUS: "focus" },
          r = { DATA_TOGGLE_CARROT: '[data-toggle^="button"]', DATA_TOGGLE: '[data-toggle="buttons"]', INPUT: "input", ACTIVE: ".active", BUTTON: ".btn" },
          s = { CLICK_DATA_API: "click.bs.button.data-api", FOCUS_BLUR_DATA_API: (n = "focus") + ".bs.button.data-api blur.bs.button.data-api" },
          n = (function () {
            function e(e) {
              this._element = e;
            }
            var i = e.prototype;
            return (
              (i.toggle = function () {
                var e = !0,
                  i = !0,
                  n = t(this._element).closest(r.DATA_TOGGLE)[0];
                if (n) {
                  var l = this._element.querySelector(r.INPUT);
                  if (l) {
                    if ("radio" === l.type)
                      if (l.checked && this._element.classList.contains(o.ACTIVE)) e = !1;
                      else {
                        var s = n.querySelector(r.ACTIVE);
                        s && t(s).removeClass(o.ACTIVE);
                      }
                    if (e) {
                      if (l.hasAttribute("disabled") || n.hasAttribute("disabled") || l.classList.contains("disabled") || n.classList.contains("disabled")) return;
                      (l.checked = !this._element.classList.contains(o.ACTIVE)), t(l).trigger("change");
                    }
                    l.focus(), (i = !1);
                  }
                }
                i && this._element.setAttribute("aria-pressed", !this._element.classList.contains(o.ACTIVE)),
                  e && t(this._element).toggleClass(o.ACTIVE);
              }),
              (i.dispose = function () {
                t.removeData(this._element, "bs.button"), (this._element = null);
              }),
              (e._jQueryInterface = function (i) {
                return this.each(function () {
                  var n = t(this).data("bs.button");
                  n || ((n = new e(this)), t(this).data("bs.button", n)), "toggle" === i && n[i]();
                });
              }),
              i(e, null, [
                {
                  key: "VERSION",
                  get: function () {
                    return "4.5.2";
                  },
                },
              ]),
              e
            );
          })();
        t(document)
          .on(s.CLICK_DATA_API, r.DATA_TOGGLE_CARROT, function (e) {
            e.preventDefault();
            var i = e.target;
            t(i).hasClass(o.BUTTON) || (i = t(i).closest(r.BUTTON)), n._jQueryInterface.call(t(i), "toggle");
          })
          .on(s.FOCUS_BLUR_DATA_API, r.DATA_TOGGLE_CARROT, function (e) {
            var i = t(e.target).closest(r.BUTTON)[0];
            t(i).toggleClass(o.FOCUS, /^focus(in)?$/.test(e.type));
          }),
          (t.fn[e] = n._jQueryInterface),
          (t.fn[e].Constructor = n),
          (t.fn[e].noConflict = function () {
            return (t.fn[e] = i), n._jQueryInterface;
          });
      })(t);
  });
  